name: Testes Automáticos PR

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.detect.outputs.changed_files }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Detectar arquivos modificados
        id: detect
        run: |
          chmod +x .github/scripts/detect_changed_files.sh
          CHANGED=$(.github/scripts/detect_changed_files.sh ${{ github.event.before }} ${{ github.sha }})
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  run-tests:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_files != ''
    strategy:
      fail-fast: false
      matrix:
        test: [frontend, backend]
    permissions:
      contents: read
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Instalar 'jq' para processar JSON
        run: sudo apt-get install -y jq

      - name: Caching de dependências do Node.js
        uses: actions/cache@v4
        with:
          path: |
            fontes/frontend/node_modules
            fontes/backend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Instalar dependências
        run: npm install
        working-directory: fontes/${{ matrix.test }}

      - name: Garantir permissão de execução ao Jest (backend)
        if: ${{ matrix.test == 'backend' }}
        run: chmod +x fontes/backend/node_modules/.bin/jest || true

      - name: Salvar arquivos alterados em arquivo
        run: echo "${{ needs.detect-changes.outputs.changed_files }}" > /tmp/changed_files.txt

      - name: Executar testes e gerar relatório
        run: |
          chmod +x .github/scripts/run_tests_by_changed_files.sh
          .github/scripts/run_tests_by_changed_files.sh /tmp/changed_files.txt "${{ matrix.test }}"
        working-directory: fontes/${{ matrix.test }}

      - name: Upload do relatório de testes
        uses: actions/upload-artifact@v4
        with:
          name: relatorio_testes_${{ matrix.test }}
          path: fontes/${{ matrix.test }}/relatorio_testes_${{ matrix.test }}.txt

  report-status:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Baixar artifacts de relatórios frontend
        uses: actions/download-artifact@v4
        with:
          name: relatorio_testes_frontend
          path: ./artifacts/frontend

      - name: Baixar artifacts de relatórios backend
        uses: actions/download-artifact@v4
        with:
          name: relatorio_testes_backend
          path: ./artifacts/backend

      - name: Combinar relatórios
        run: |
          cat ./artifacts/frontend/relatorio_testes_frontend.txt \
              ./artifacts/backend/relatorio_testes_backend.txt > relatorio_testes_completo.txt

      - name: Verificar status da matriz
        id: check_status
        run: |
          if [ "${{ needs.run-tests.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Comentar no PR com o relatório completo
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let report = '';
            try {
              report = fs.readFileSync('relatorio_testes_completo.txt', 'utf8');
            } catch (err) {
              report = 'Relatório de testes não encontrado.';
            }

            const status = '${{ steps.check_status.outputs.status }}';
            const commentBody = `### Relatório de Testes\n\n**Status:** ${status === 'success' ? '✅ Passou' : '❌ Falhou'}\n\n${report}`;

            const prNumber = context.payload.pull_request?.number;
            if (prNumber) {
              github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              console.log('Não há PR associado a este evento. Comentário ignorado.');
            }

      - name: Criar Issue se algum teste falhar
        if: steps.check_status.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let report = '';
            try {
              report = fs.readFileSync('relatorio_testes_completo.txt', 'utf8');
            } catch (err) {
              report = 'Relatório de testes não encontrado.';
            }

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Falha nos testes - ${new Date().toISOString()}`,
              body: `Ocorreu uma falha nos testes automáticos.\n\nRelatório:\n\n${report}`
            });
